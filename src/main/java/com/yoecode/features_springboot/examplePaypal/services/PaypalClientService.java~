package com.yoecode.features_springboot.examplePaypal.services;

import com.paypal.core.PayPalHttpClient;
import com.paypal.http.HttpResponse;
import com.paypal.orders.AmountWithBreakdown;
import com.paypal.orders.ApplicationContext;
import com.paypal.orders.LinkDescription;
import com.paypal.orders.Order;
import com.paypal.orders.OrderRequest;
import com.paypal.orders.OrdersCaptureRequest;
import com.paypal.orders.OrdersCreateRequest;
import com.paypal.orders.OrdersGetRequest;
import com.paypal.orders.PurchaseUnitRequest;
import com.yoecode.features_springboot.examplePaypal.models.CreateOrderPaypalRequest;
import com.yoecode.features_springboot.examplePaypal.models.CreateOrderPaypalResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class PaypalClientService {
    private static final Logger logger = LoggerFactory.getLogger(PaypalClientService.class);

    @Autowired
    private PayPalHttpClient payPalHttpClient;

    public CreateOrderPaypalResponse createOrder(CreateOrderPaypalRequest request) throws IOException {
        logger.info("Creando orden de PayPal para monto: {} {}", request.getAmount(), request.getCurrency());

        OrderRequest orderRequest = new OrderRequest();
        orderRequest.checkoutPaymentIntent("CAPTURE");

        // Configurar el monto
        AmountWithBreakdown  amountBreakdown = new AmountWithBreakdown()
                .currencyCode(request.getCurrency())
                .value(request.getAmount().toString());

        // Configurar la unidad de compra
        PurchaseUnitRequest purchaseUnitRequest = new PurchaseUnitRequest()
                .amountWithBreakdown(amountBreakdown);

        if (request.getDescription() != null) {
            purchaseUnitRequest.description(request.getDescription());
        }

        List<PurchaseUnitRequest> purchaseUnits = new ArrayList<>();
        purchaseUnits.add(purchaseUnitRequest);
        orderRequest.purchaseUnits(purchaseUnits);

        // Configurar URLs de retorno
        ApplicationContext applicationContext = new ApplicationContext()
                .brandName("Mi Tienda")
                .landingPage("BILLING")
                .userAction("PAY_NOW");

        if (request.getReturnUrl() != null) {
            applicationContext.returnUrl(request.getReturnUrl());
        }
        if (request.getCancelUrl() != null) {
            applicationContext.cancelUrl(request.getCancelUrl());
        }

        orderRequest.applicationContext(applicationContext);

        // Crear la orden
        OrdersCreateRequest ordersCreateRequest = new OrdersCreateRequest();
        ordersCreateRequest.requestBody(orderRequest);

        HttpResponse<Order> response = payPalHttpClient.execute(ordersCreateRequest);
        Order order = response.result();

        logger.info("Orden creada exitosamente con ID: {}", order.id());

        // Obtener la URL de aprobaciÃ³n
        String approvalUrl = order.links().stream()
                .filter(link -> "approve".equals(link.rel()))
                .findFirst()
                .map(LinkDescription::href)
                .orElse(null);

        return new CreateOrderPaypalResponse(order.id(), order.status(), approvalUrl);
    }

    public Order captureOrder(String orderId) throws IOException {
        logger.info("Capturando orden: {}", orderId);

        OrdersCaptureRequest request = new OrdersCaptureRequest(orderId);
        HttpResponse<Order> response = payPalHttpClient.execute(request);
        Order order = response.result();

        logger.info("Orden capturada exitosamente: {}", order.id());
        return order;
    }

    public Order getOrderDetails(String orderId) throws IOException {
        logger.info("Obteniendo detalles de la orden: {}", orderId);

        OrdersGetRequest request = new OrdersGetRequest(orderId);
        HttpResponse<Order> response = payPalHttpClient.execute(request);

        return response.result();
    }
}
